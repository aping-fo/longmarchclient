(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/scripts/SignPanel.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '64f2bpy4sdDbLE5WaVL+Etj', 'SignPanel', __filename);
// scripts/SignPanel.js

"use strict";

var _constants = require("constants");

var GameManager = require("GameManager");
var AudioManager = require("AudioManager");
var PopupTipsNode = require("PopupTipsNode");
var CallbackComponent = require("CallbackComponent");
var SignPanel = {
    _sign: null, // prefab
    _detailLabel: null, // 内容
    _cancelButton: null, // 确定按钮
    _enterButton: null, // 取消按钮
    _enterCallBack: null, // 回调事件
    _animSpeed: 0.3, // 动画速度
    _sprite: null //人物
};

cc.Class({
    extends: cc.Component,

    properties: {},

    statics: {
        show: function show(reward, enterCallback, enable, type) {

            var self = this;

            // 判断
            if (SignPanel._sign != undefined) return;

            // SignPanel._animSpeed = 0.2;
            cc.loader.loadRes("prefabs/PopupSignNode", cc.Prefab, function (error, prefab) {

                if (error) {
                    cc.error(error);
                    return;
                }

                var sign = cc.instantiate(prefab);
                SignPanel._sign = sign;
                SignPanel._main = cc.find('group', sign);

                // 动画 
                // var cbFadeOut = cc.callFunc(self.onFadeOutFinish, self);
                // var cbFadeIn = cc.callFunc(self.onFadeInFinish, self);
                // self.actionFadeIn = cc.sequence(cc.spawn(cc.fadeTo(SignPanel._animSpeed, 255), cc.scaleTo(SignPanel._animSpeed, 1.0)), cbFadeIn);
                // self.actionFadeOut = cc.sequence(cc.spawn(cc.fadeTo(SignPanel._animSpeed, 0), cc.scaleTo(SignPanel._animSpeed, 1.2)), cbFadeOut);

                SignPanel._detailLabel = cc.find("info/lb_num", SignPanel._main).getComponent(cc.Label);
                SignPanel._confirmButton = cc.find("receive_Btn", SignPanel._main);
                SignPanel._confirmButton.getComponent(cc.Sprite).setState(1);
                SignPanel._animation = sign.getComponent(cc.Animation);
                SignPanel._enterCallBack = enterCallback;
                SignPanel._type = type;

                var callbackComponent = sign.addComponent(CallbackComponent);
                callbackComponent.onFadeInFinish = function () {
                    SignPanel._sign.resumeSystemEvents(true);
                    // cc.eventManager.resumeTarget(SignPanel._sign, true);
                };
                callbackComponent.onFadeOutFinish = function () {
                    self.onDestory();
                };
                SignPanel._confirmButton.getComponent(cc.Button).interactable = enable;
                if (!enable) {
                    var action = cc.sequence(cc.delayTime(3), cc.callFunc(function () {
                        self.startFadeOut();
                    }));
                    SignPanel._sign.runAction(action);
                }
                // 添加点击事件
                SignPanel._confirmButton.on('click', self.onButtonClicked, self);
                sign.getChildByName("bg2").on('click', self.onCloseBtnClicked, self);

                // 父视图
                SignPanel._sign.setParent(cc.find("Canvas"));
                SignPanel._sign.position = cc.Vec2.ZERO;

                // 展现 sign
                self.startFadeIn();

                self.configSignPanel(reward);
            });

            // 参数
            self.configSignPanel = function (reward) {

                SignPanel._detailLabel.string = '+' + reward;
            };

            // 执行弹进动画
            self.startFadeIn = function () {
                SignPanel._sign.pauseSystemEvents(true);
                // cc.eventManager.pauseTarget(SignPanel._main, true);
                // SignPanel._main.position = cc.p(0, 0);
                // SignPanel._main.setScale(1.2);
                // SignPanel._main.opacity = 0;
                // SignPanel._main.runAction(self.actionFadeIn);
                SignPanel._animation.play("popup_signnode_show");
            };

            // 执行弹出动画
            self.startFadeOut = function () {
                SignPanel._sign.pauseSystemEvents(true);
                // cc.eventManager.pauseTarget(SignPanel._main, true);
                // if(SignPanel._main != null)
                // {
                //     SignPanel._main.runAction(self.actionFadeOut);
                // }
                SignPanel._animation.play("popup_signnode_hide");
            };

            // // 弹进动画完成回调
            // self.onFadeInFinish = function () {
            //     cc.eventManager.resumeTarget(SignPanel._sign, true);
            // };

            // // 弹出动画完成回调
            // self.onFadeOutFinish = function () {
            //     self.onDestory();
            // };

            // 按钮点击事件
            self.onButtonClicked = function (event) {
                GameManager.getInstance().Sign(function (resp) {
                    PopupTipsNode.appearWithText('领取成功');
                    if (SignPanel._enterCallBack != null) {
                        SignPanel._enterCallBack(resp);
                    }
                    AudioManager.getInstance().playEffect(AudioManager.EFFECT_TYPE.MONEY);
                }, SignPanel._type);
                SignPanel._sign.stopAllActions();
                self.startFadeOut();
            };

            self.onCloseBtnClicked = function (event) {
                self.startFadeOut();
            };

            // 销毁 sign 
            self.onDestory = function () {
                SignPanel._sign.destroy();
                SignPanel._sign = null;
                SignPanel._detailLabel = null;
                SignPanel._enterCallBack = null;
            };

            AudioManager.getInstance().playEffect(AudioManager.EFFECT_TYPE.POPUP);
        }
    },

    start: function start() {}
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=SignPanel.js.map
        