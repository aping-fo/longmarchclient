(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/scripts/FighterNode.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, 'f62896nalRIZIc0Kshj2ls/', 'FighterNode', __filename);
// scripts/FighterNode.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var UIHelper = require("UIHelper");
var GameManager = require("GameManager");
var gameEnum = require("GameEnum");
var isMoving = false;
var colors = [cc.color(255, 127, 127), cc.color(155, 124, 255), cc.color(124, 187, 255), cc.color(202, 236, 92), cc.color(236, 150, 92), cc.color(255, 133, 117), cc.color(92, 113, 128), cc.color(255, 255, 255)];

cc.Class({
    extends: cc.Component,

    properties: {
        renderNode: {
            type: cc.Node,
            default: null
        },

        avatarImg: {
            type: cc.Sprite,
            default: null
        },

        nameLb: {
            type: cc.Label,
            default: null
        },

        dragonBoneDisplay: {
            type: dragonBones.ArmatureDisplay,
            default: null
        },

        openId: "",
        side: 0,
        holeIdx: -1,
        isAlive: false,
        isDead: false
    },

    // LIFE-CYCLE CALLBACKS:

    onLoad: function onLoad() {},
    reset: function reset() {
        var img = cc.find('img', this.renderNode);
        var _armatureDisPlay = img.getComponent(dragonBones.ArmatureDisplay);
        //获取 Armatrue
        var _armature = _armatureDisPlay.armature();
        var slots = _armature.getSlots();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = slots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var slot = _step.value;

                if (slot.name == 'eye_1' || slot.name == 'eye_2') {
                    slot.visible = false;
                } else if (slot.name != "body_1") {
                    slot._color = this.myColor;
                } else {
                    slot._color = cc.color(255, 255, 255);
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    },
    start: function start() {

        this.m_answerTimer = 0;
        this.dragonBoneDisplay.playAnimation("normal", 0);
        this.dragonBoneDisplay.addEventListener(dragonBones.EventObject.COMPLETE, this.onAnimationComplete, this);
    },
    update: function update(dt) {
        // if(this.isDead)
        // {
        //     var oldWorldPos = this.node.parent.convertToWorldSpaceAR(this.node.position);
        //     if(oldWorldPos.y<200)
        //     {
        //         this.node.active=false;
        //     }
        //     return;
        // }
        if (!this.m_isRobot) {
            return;
        }

        if (!this.isAlive) {
            return;
        }

        if (GameManager.getInstance().gameState != gameEnum.GAME_STATE.CHIKEN_ANSWERING) {
            return;
        }

        this.m_answerTimer -= dt;
        if (this.m_answerTimer <= 0) {
            var answer = 0;
            if (Math.random() > 0.5) {
                answer = 1;
            }
            if (this.m_question != null) {
                GameManager.getInstance().Chicken_SubmitAnswer(this.openId, answer, this.m_question.id, function () {});
                this.resetAnswerTime();
            }
        }
    },
    updateWithData: function updateWithData(data) {
        this.m_isRobot = data.robot;

        this.openId = data.openId;
        this.nameLb.string = data.nickName;
        var ran = Math.round(Math.random() * (colors.length - 1));
        this.myColor = colors[ran];
        this.reset();
        // UIHelper.SetImageFromUrl(this.avatarImg.getComponent(cc.Sprite), data.iconUrl, true);
    },
    startAnswer: function startAnswer(question) {
        this.m_question = question;
        this.resetAnswerTime();
    },
    resetAnswerTime: function resetAnswerTime() {
        if (Math.random() > 0.5) {
            this.m_answerTimer = Math.floor(Math.random() * gameEnum.GameConst.INTERVAL_CHICKEN_ANSWER_TIME);
        }
    },
    setPosition: function setPosition(x, y, motion, isMe) {
        if (this.isDead) {
            return;
        }
        this.reset();
        if (!motion) {
            this.node.setPosition(cc.v2(x, y));
        } else {
            this.node.stopAllActions();
            var delayTime = isMe || isMoving ? 0 : Math.round(Math.random() * 5) * .1;
            var moveTo = cc.sequence(cc.delayTime(delayTime), cc.callFunc(function () {
                isMoving = true;
            }), cc.moveTo(0.3, cc.v2(x, y)), cc.callFunc(function () {
                isMoving = false;
            }));
            this.node.runAction(moveTo);
        }
    },
    playDeadAnim: function playDeadAnim() {
        // this.dragonBoneDisplay.playAnimation("unnormal", 1);
        var img = cc.find('img', this.renderNode);
        var _armatureDisPlay = img.getComponent(dragonBones.ArmatureDisplay);
        //获取 Armatrue
        var _armature = _armatureDisPlay.armature();
        var slots = _armature.getSlots();
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = slots[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var slot = _step2.value;

                if (slot.name == 'eye_1' || slot.name == 'eye_2') {
                    slot.visible = true;
                } else {
                    slot._color = cc.color(0, 0, 0);
                }
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        var th = this;
        this.scheduleOnce(function () {
            th.node.active = false;
        }, 1);
    },
    onAnimationComplete: function onAnimationComplete(event) {
        if (this.dragonBoneDisplay.animationName != "unnormal") {
            return;
        }
        this.node.active = false;
    },
    onCollisionEnter: function onCollisionEnter(other, self) {
        if (other.node.name != "FireBall") {
            return;
        }
        var _this = this;
        this.playDeadAnim();
        this.isDead = true;
        // this.scheduleOnce(function(){ var parent=cc.find("Canvas/background/deadCanvas")

        // var oldWorldPos = _this.node.parent.convertToWorldSpaceAR(_this.node.position);
        // _this.node.setParent(parent);

        // var newPos = parent.convertToNodeSpaceAR(oldWorldPos);
        // _this.node.position = newPos;},2)
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=FighterNode.js.map
        